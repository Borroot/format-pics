#!/usr/bin/env bash
# AUTHOR: Bram Pulles

# This program formats all the images given as arguments
# to one unified format.

readonly FORMATS=$HOME/.local/bin/format/formats
readonly TMP_OUT=$(mktemp)

trap "cleanup; exit 1" SIGINT

# Remove all the temporaray files.
cleanup ()
{
	rm -f "$TMP_OUT"
}

# Check if all of the filenames do not contain spaces. $1 is the
# amount of arguments and $@ (excluding $1) are the actual arguments.
# We also check if there is at least one argument.
check_spaces ()
{
	[[ "$1" == 0 ]] && >&2 echo "Please provide files to convert." && exit 1

	local act_args perc_args # actual and perceived amount of arguments
	act_args=$1; shift
	perc_args=$(grep -o ' ' <<< "$@" | wc -l) && ((perc_args++))

	if ((act_args != perc_args))
	then
		>&2 echo "Some of the files given contain spaces, please remove these."
		>&2 echo -e "This can be done with e.g. \e[1mperl-rename 'y/ /_/' FILES"
		exit 1
	fi
}

# Convert all of the matching formats to the unified format.
# All of the files which need to be converted are given in $@.
format ()
{
	echo "$@" | tr ' ' '\n' | sed -nE -f "$FORMATS" > "$TMP_OUT" || exit 1
}

# Increase the last six digits of the dest variable by one.
inc_dest ()
{
	local six
	six=$(sed -E 's/.*-.*-.*-([[:digit:]]{6})\..*/\1/g' <<< "$dest")

	six=$(sed 's/^0*//g' <<< "$six")   # remove leading zero's
	((six++))                          # increase by one
	six=$(printf '%06i' "$six")        # add leading zero's

	dest=$(sed -E 's/(.*-.*-.*-).*\.(.*)/\1'"$six"'.\2/g' <<< "$dest")
}

# Not all of the files in the new format are unique, this means that
# those files have to be made unique in some way to prevent data loss.
uniqueify ()
{
	# First we check if there are conflicts, if not we immediately return.
	local num_out num_uniq
	num_out=$(wc -l < "$TMP_OUT")
	num_uniq=$(sed -E 's/.+ (.+)/\1/g' < "$TMP_OUT" | sort | uniq | wc -l)

	((num_out == 0)) && NO_CONVERSIONS=true
	((num_out == num_uniq)) && return

	>&2 echo -e "The following files map to the same destination:\n"

	# Loop over all the dests which are not unique. For every
	# dest take all the mappings corresponding to this dest
	# and change them until they are all unique.
	sed -E 's/.+ (.+)/\1/g' < "$TMP_OUT" | sort | uniq -dc |
	while read -r num_dest
	do
		local num dest original # num of occurences of dest
		num=$( cut -d ' ' -f 1 <<< "$num_dest") # >= 2
		dest=$(cut -d ' ' -f 2 <<< "$num_dest") && original="$dest"

		# Print the mappings which are not unique.
		>&2 echo "  Conflicting mappings:"
		grep -F "$dest" < "$TMP_OUT" | sed -E 's/(.*) (.*)/    \1\t-> \2/g' >&2
		>&2 echo "  Automatically resolve:"

		for ((i = 2; i <= num; i++))
		do
			# Increase the destinations until is is unique.
			inc_dest
			while grep -q "$dest" < "$TMP_OUT"
			do
				inc_dest
			done

			# Replace the dest at the line number found, this is the i'th dest.
			# The i'th dest is found with 'grep -m $i'.
			local dest_line dest_linenr
			dest_line=$(grep --line-number -m "$i" "$original" < "$TMP_OUT" | tail -n 1)
			dest_linenr=$(sed -E 's/^([[:digit:]]+):.*/\1/' <<< "$dest_line")

			sed -i "${dest_linenr}s;$original;$dest;" "$TMP_OUT"

			# Print how the conflict is solved.
			local line src
			line=$(grep -F "$dest" < "$TMP_OUT")
			src=$(sed -E 's/(.+) .+/\1/' <<< "$line")
			>&2 echo -e "    $src\t-> $dest\n"
		done
	done
}

# Ask the user a yes/no question and continue only if they said yes.
ask ()
{
	local answer
	echo -en "$@" && read -r answer

	if [[ "$answer" != yes ]]
	then
		cleanup
		exit 1
	fi
}

# Prompt to ask for verification of the user. If there are no possible
# conversion then do not ask the user.
verify ()
{
	if [[ $NO_CONVERSIONS == true ]]
	then
		echo "There are no possible conversions."
	else
		echo -n "Show the mappings. [press enter] " && read -r
		less < "$TMP_OUT" && ask "Are these mappings correct? [no/yes] "
	fi
}

# Convert the files from the old format to the new format by simply
# renaming them using 'mv'.
convert ()
{
	local run dest_folder
	[[ $NO_CONVERSIONS == true ]] && return

	# Ask where the user wants to store the new files and set $dest_folder.
	echo -en "What will be the destination directory? (default 'new'): "
	read -r dest_folder
	dest_folder=${dest_folder:-new}

	# Set the $run variable according to the $dest_folder.
	if [[ $(basename $dest_folder) == '.' ]]
	then
		run='mv'
		echo -e "\nSo we will rename all images in their original directory."
	else
		run='cp'
		echo -e "\nSo we will copy all of the images to '$dest_folder'."
	fi

	# Ask for a last confirmation.
	ask "Converting is about to start, do you want to proceed? [no/yes] "

	# Create the top directory and its parents if necessary.
	mkdir -p $dest_folder
	[[ ! -d $dest_folder ]] && exit 1

	# Do the actual conversions!
	while read -r line
	do
		local src dest
		src=$(sed -E 's/(.+) (.+)/\1/g' <<< "$line")
		dest=$dest_folder/$(sed -E 's/(.+) (.+)/\2/g' <<< "$line")

		# Create the subdirectories if necessary.
		dir=$(dirname $dest)
		[[ ! -d $dir ]] && mkdir -p $dir

		$run -v "$src" "$dest"
	done < "$TMP_OUT"
}

# Print all the files which cannot be converted and thus are not
# matched with any of the formats in the $FORMATS file. The files
# are given through $@.
no_convert ()
{
	local formats_or answer at_least_one

	# Create a regex from the $FORMATS file for grep, the inverted
	# matched files are all files which are not converted.
	formats_or=$(sed -nE 's/s;(.*);.*;gp/(\1)/p' < $FORMATS \
	            | tr '\n' '|' | sed -E 's/(.*)\|/\1/g')

	at_least_one=0 # There has not been a 'no convertable' yet.
	already_correct=0 # Count how many files are already correctly formatted.

	# Now get all the files which are not matched by the regex. Print
	# each of these files if they are not a directory and not in the
	# correct format already.
	while read -r file
	do
		# Check if the file is already in the correct format.
		if [[ ! -d "$file" ]] && ! echo "$file" | grep -Eq \
		    '[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}-[[:digit:]]{6}\.'
		then
			# Print the header only if there is at least one 'no convertable'.
			if ((++at_least_one == 1))
			then
				>&2 echo -e "\nThe following files cannot be converted:\n"
			fi

			>&2 echo "    $file"
		else
			# The file is in the correct format.
			((++already_correct))
		fi
	done < <(echo "$@" | tr ' ' '\n' | grep -vE "$formats_or")

	# Ask if the user wants to continue considering the nonconvertable files.
	if ((at_least_one > 0))
	then
		>&2 echo
		[[ $NO_CONVERSIONS != true ]] && ask "Do you still wish to continue? [no/yes] "
	fi
}

# Display the results. The amount of files coming in is given in $1.
results ()
{
	local out correct
	out=$(wc -l < "$TMP_OUT")
	((already_correct > 0)) && correct=" ($already_correct files were already correct.)"
	echo -e "Renamed $out out of $1 files.$correct"
}

main ()
{
	check_spaces "$#" "$@"
	format "$@"
	uniqueify
	verify
	no_convert "$@"
	convert
	results "$#"
	cleanup
}

main "$@"
